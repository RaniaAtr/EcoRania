security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # Authentification par login (JWT)
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Routes API protégées par token JWT
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

        # Routes publiques si besoin
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

    access_control:

        # Autoriser l'inscription
    - { path: ^/api/users/create, roles: PUBLIC_ACCESS }

    # Autoriser le login JWT
    - { path: ^/api/login_check, roles: PUBLIC_ACCESS }

    #  Protéger les routes d'administration
    - { path: ^/api/admin, roles: ROLE_ADMIN }

    #  Accès aux infos utilisateur connecté
    - { path: ^/api/users$, roles: ROLE_USER }

    #  Toute autre route API requiert un JWT
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

